basePath: /
definitions:
  app.Credential:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  app.addUser:
    properties:
      name:
        example: ivan
        type: string
      patronymic:
        example: ivanovich
        type: string
      surname:
        example: ivanov
        type: string
    type: object
  app.showUser:
    properties:
      age:
        example: 25
        format: int64
        type: integer
      gender:
        example: male
        type: string
      id:
        example: 1
        format: int64
        type: integer
      name:
        example: ivan
        type: string
      nationality:
        example: RU
        type: string
      patronymic:
        example: ivanovich
        type: string
      surname:
        example: ivanov
        type: string
    type: object
  app.updateUser:
    properties:
      id:
        example: 50
        type: integer
      name:
        example: ivan
        type: string
      patronymic:
        example: ivanovich
        type: string
      surname:
        example: ivanov
        type: string
    type: object
host: localhost:8888
info:
  contact:
    email: soberkoder@gmail.com
    name: API Support
  description: This is a sample service for managing users
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: User API
  version: "1.0"
paths:
  /delete:
    delete:
      consumes:
      - application/json
      description: Delete persons by id from users
      parameters:
      - description: delete user
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      summary: Delete persons by id from users
      tags:
      - users
  /getToken:
    post:
      consumes:
      - application/json
      description: Get Token
      parameters:
      - description: get token
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/app.Credential'
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
      summary: Get Token
      tags:
      - users
  /insert:
    post:
      consumes:
      - application/json
      description: Insert persons into users
      parameters:
      - description: Add user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/app.addUser'
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
      summary: Insert persons into users
      tags:
      - users
  /show:
    get:
      consumes:
      - application/json
      description: Show persons in users
      parameters:
      - description: Sort records
        in: query
        name: sort
        type: string
      - description: Show max limit records
        in: query
        name: limit
        type: integer
      - description: Show records with current offset
        in: query
        name: offset
        type: integer
      - example: 25
        format: int64
        in: query
        name: age
        type: integer
      - example: male
        in: query
        name: gender
        type: string
      - example: 1
        format: int64
        in: query
        name: id
        type: integer
      - example: ivan
        in: query
        name: name
        type: string
      - example: RU
        in: query
        name: nationality
        type: string
      - example: ivanovich
        in: query
        name: patronymic
        type: string
      - example: ivanov
        in: query
        name: surname
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/app.showUser'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      summary: Show persons in users
      tags:
      - users
  /test/{id}:
    delete:
      consumes:
      - application/json
      description: Delete persons by id from users
      parameters:
      - description: delete user
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      summary: Delete persons by id from users
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Show persons in users
      parameters:
      - description: Show users by id
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/app.showUser'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      summary: Show persons in users
      tags:
      - users
  /update:
    put:
      consumes:
      - application/json
      description: Update persons in users
      parameters:
      - description: Update user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/app.updateUser'
      produces:
      - application/json
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      summary: Update persons in users
      tags:
      - users
  /useToken:
    post:
      consumes:
      - application/json
      description: Test tokens
      produces:
      - application/json
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      security:
      - Bearer: []
      summary: test tokens
      tags:
      - users
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
